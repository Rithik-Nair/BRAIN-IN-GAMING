doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Neuro Dash
    style.
      /* General body styles */
      body {
        font-family: 'Arial', sans-serif;
        background: #f0f8ff;
        text-align: center;
        margin: 0;
        padding: 20px;
      }

      /* Game container styles */
      #game-container {
        width: 100%;
        height: 400px;
        margin: 0 auto;
        position: relative;
        background: linear-gradient(to bottom, #fff, #e0e0e0);
        overflow: hidden;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      }

      /* Dinosaur styles */
      #dino {
        width: 50px;
        height: 50px;
        position: absolute;
        bottom: 10px;
        left: 50px;
        background-color: #ff6347; /* Tomato color for the dino */
        border-radius: 50%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        transition: bottom 0.2s ease-out;
      }

      #dino .tail {
        width: 20px;
        height: 20px;
        position: absolute;
        bottom: 0;
        left: 45px;
        background-color: #ff4500; /* Orange tail */
        border-radius: 50%;
      }

      /* Dinosaur legs */
      #dino .leg {
        position: absolute;
        bottom: 0;
        width: 8px;
        height: 12px;
        background-color: #ff4500;
        border-radius: 3px;
      }

      #dino .leg.left {
        left: 5px;
      }

      #dino .leg.right {
        right: 5px;
      }

      /* Obstacles styles */
      .obstacle {
        width: 40px;
        height: 40px;
        position: absolute;
        bottom: 10px;
        background-color: #32cd32; /* Lime green for obstacles */
        border-radius: 5px;
        animation: moveObstacle 1.5s infinite linear;
      }

      .obstacle-1 {
        background-color: #32cd32;
      }

      .obstacle-2 {
        background-color: #ff1493; /* Hot pink obstacles */
      }

      .obstacle-3 {
        background-color: #ffff00; /* Yellow obstacles */
      }

      /* Animation for obstacles */
      @keyframes moveObstacle {
        0% {
          transform: translateX(100%);
        }
        100% {
          transform: translateX(-100%);
        }
      }

      /* Start and Home buttons */
      #start-button, #home-button {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #ff6347;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      #start-button:hover, #home-button:hover {
        background-color: #ff4500;
      }

      /* Game over modal styles */
      #game-over-modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        text-align: center;
      }

      #game-over-modal button {
        margin-top: 15px;
        background-color: #ff6347;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      #game-over-modal button:hover {
        background-color: #ff4500;
      }

      /* Score and instructions */
      #score {
        font-size: 24px;
        color: #ff6347;
        position: absolute;
        top: 10px;
        left: 20px;
        z-index: 10;
      }

      /* Instructions */
      .instructions {
        font-size: 18px;
        color: #333;
        margin: 10px 0;
        text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
      }

      /* Concentration meter styles */
      #concentration-meter-container {
        width: 100%;
        height: 30px;
        margin: 20px auto 0;
        background: #e0e0e0;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      #concentration-meter {
        height: 100%;
        width: 0%;
        background: linear-gradient(to right, #ff6347, #32cd32);
        transition: width 0.3s ease;
      }

  body
    h1 Neuro Dash
    div.instruction
      button(id="home-button", onclick="goHome()") Back to Home
      button(id="start-button", onclick="startGame()") Start Game
      p Press SPACE to jump!
    div#score Points: 0
    div#game-container
      div#dino
        div.tail
        div.leg.left
        div.leg.right
    div#concentration-meter-container
      div#concentration-meter
    div#game-over-modal
     h2 Game Over!
     p Your score: <span id="final-score">0</span>
     button(id="reset-button", onclick="resetGame()") Play Again
     button(id="view-analysis-button", onclick="viewAnalysis()") View Your Analysis
     button(onclick="window.location.href='/home'") Back Home
    script.
      let dino = document.getElementById('dino');
      let gameContainer = document.getElementById('game-container');
      let scoreElement = document.getElementById('score');
      let gameOverModal = document.getElementById('game-over-modal');
      let finalScoreElement = document.getElementById('final-score');
      let startButton = document.getElementById('start-button');
      let homeButton = document.getElementById('home-button');
      let concentrationMeter = document.getElementById('concentration-meter');
      let resetButton = document.getElementById('reset-button');
      let score = 0;
      let gameInterval, obstacleInterval;
      let isJumping = false;
      let isGameReset = false;

      // Function to start the game
      function startGame() {
        if (isGameReset) return; // Prevent starting again before reset
        score = 0;
        scoreElement.textContent = `Points: ${score}`;
        gameOverModal.style.display = 'none';
        concentrationMeter.style.width = '0%';
        createObstacles();
        gameInterval = setInterval(moveObstacles, 20);
        updateConcentrationMeter();
        startButton.style.display = 'none';
      }

      // Create obstacles randomly
      function createObstacles() {
        obstacleInterval = setInterval(function() {
          const obstacleType = ['obstacle-1', 'obstacle-2', 'obstacle-3'][Math.floor(Math.random() * 3)];
          const obstacle = document.createElement('div');
          obstacle.classList.add('obstacle', obstacleType);
          obstacle.style.left = '100%';
          gameContainer.appendChild(obstacle);
        }, 1500);
      }

      // Move obstacles
      function moveObstacles() {
        const obstacles = document.querySelectorAll('.obstacle');
        obstacles.forEach(obstacle => {
          const currentLeft = parseFloat(obstacle.style.left);
          if (currentLeft <= -40) {
            obstacle.remove(); // Remove obstacles that have passed the screen
            score++;
            scoreElement.textContent = `Points: ${score}`;
            increaseConcentrationMeter();
          } else {
            obstacle.style.left = `${currentLeft - 2}%`;
          }

          // Collision detection
          if (collisionDetection(dino, obstacle)) {
            gameOver();
          }
        });
      }

      // Collision detection between dino and obstacle
      function collisionDetection(dino, obstacle) {
        const dinoRect = dino.getBoundingClientRect();
        const obstacleRect = obstacle.getBoundingClientRect();
        return !(dinoRect.right < obstacleRect.left || 
                 dinoRect.left > obstacleRect.right || 
                 dinoRect.bottom < obstacleRect.top ||
                 dinoRect.top > obstacleRect.bottom);
      }

      // Make the dino jump
      document.addEventListener('keydown', function(event) {
        if (event.keyCode === 32 && !isJumping) { // SPACE key
          isJumping = true;
          dino.style.bottom = '100px'; // Jump height
          setTimeout(() => {
            dino.style.bottom = '10px'; // Fall back down
            isJumping = false;
          }, 500); // Time to stay in the air
        }
      });

      // Increase concentration meter
      function increaseConcentrationMeter() {
        const currentWidth = parseInt(concentrationMeter.style.width) || 0;
        if (currentWidth < 100) {
          concentrationMeter.style.width = `${currentWidth + 5}%`;
        }
      }

      // End game
      function gameOver() {
        clearInterval(gameInterval);
        clearInterval(obstacleInterval);
        finalScoreElement.textContent = score;
        gameOverModal.style.display = 'block';
        isGameReset = true; // Mark game as reset

        // Send game data to the server
        fetch('/saveGameData', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ score: score, concentration: parseInt(concentrationMeter.style.width) })
        })
        .then(response => response.json())
        .then(data => {
          console.log('Game data saved:', data);
        })
        .catch(error => {
          console.error('Error:', error);
        });
      }

      // Reset game
      function resetGame() {
        score = 0;
        scoreElement.textContent = `Points: ${score}`;
        concentrationMeter.style.width = '0%';
        gameOverModal.style.display = 'none';
        isGameReset = false; // Reset the flag
        startGame();
      }

      // Update concentration meter periodically
      function updateConcentrationMeter() {
        setInterval(() => {
          const currentWidth = parseInt(concentrationMeter.style.width) || 0;
          if (currentWidth > 0) {
            concentrationMeter.style.width = `${currentWidth - 1}%`;
          }
        }, 500);
      }

      // View analysis function
      function viewAnalysis() {
        window.location.href = '/analysis'; // This will navigate to the /analysis route
      }

      // Go back to the home page
      function goHome() {
        window.location.href = '/'; // Modify this URL to your homepage
      }

      // Show start game button
      startButton.style.display = 'block';
