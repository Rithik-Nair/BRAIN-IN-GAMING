doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Word Search Game - Cerebral Crossing
    style.
      /* Reset */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      /* Body styling */
      body {
        font-family: 'Roboto', sans-serif;
        background: linear-gradient(to bottom, #ff7e5f, #feb47b);
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        flex-direction: column;
        overflow: hidden;
        position: relative; /* To ensure concentration meter is visible */
      }

      h1 {
        font-size: 3rem;
        font-weight: 700;
        color: white;
        text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.6);
        margin-bottom: 20px;
      }

      #game-container {
        display: grid;
        grid-template-columns: repeat(8, 60px);
        grid-gap: 8px;
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
        display: none;
        transform: scale(0);
        animation: scaleUp 0.5s ease forwards;
      }

      .cell {
        width: 60px;
        height: 60px;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f5f5f5;
        border-radius: 10px;
        font-size: 1.4rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .cell:hover {
        background-color: #ffeb3b;
        transform: scale(1.1);
      }

      .cell.selected {
        background-color: #ff9800;
        color: white;
        animation: pulse 0.5s infinite;
      }

      .cell.found {
        background-color: #4caf50;
        color: white;
        box-shadow: 0 0 10px rgba(76, 175, 80, 0.8);
        animation: glow 1s ease-out;
      }

      #message {
        font-size: 1.6rem;
        font-weight: 600;
        color: white;
        margin-top: 20px;
      }

      #reset-button, #start-button {
        padding: 12px 30px;
        margin-top: 20px;
        background-color: #42a5f5;
        color: white;
        border: none;
        border-radius: 12px;
        font-size: 1.3rem;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
      }

      #reset-button:hover, #start-button:hover {
        background-color: #1e88e5;
        transform: scale(1.1);
      }

      /* Pop-up Modal Styling */
      #popup {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        justify-content: center;
        align-items: center;
        z-index: 1000;
        animation: fadeIn 0.5s ease-out forwards;
      }

      #popup-content {
        background-color: white;
        padding: 40px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
      }

      #popup-message {
        font-size: 1.8rem;
        margin-bottom: 20px;
        font-weight: bold;
      }

      #popup-button {
        padding: 12px 30px;
        background-color: #42a5f5;
        color: white;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-size: 1.3rem;
        transition: background-color 0.3s ease;
      }

      #popup-button:hover {
        background-color: #1e88e5;
      }

      /* Concentration Meter */
      #concentration-meter {
        width: 200px;
        height: 30px;
        background-color: #ddd;
        border-radius: 15px;
        margin-top: 20px;
        position: absolute; /* Position it fixed */
        top: 10px; /* Keep it near the top */
        left: 50%; /* Center horizontally */
        transform: translateX(-50%);
      }

      #concentration-level {
        height: 100%;
        background-color: #4caf50;
        border-radius: 15px;
        width: 0%;
        transition: width 0.3s ease;
      }

      /* Animations */
      @keyframes scaleUp {
        0% {
          transform: scale(0);
        }
        100% {
          transform: scale(1);
        }
      }

      @keyframes pulse {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }

      @keyframes glow {
        0% {
          box-shadow: 0 0 5px rgba(76, 175, 80, 0.6);
        }
        100% {
          box-shadow: 0 0 15px rgba(76, 175, 80, 1);
        }
      }

      @keyframes fadeIn {
        0% {
          opacity: 0;
        }
        100% {
          opacity: 1;
        }
      }

      /* Google Fonts */
      @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap');

  body
    h1 Cerebral Crossing - Word Search
    p#message Find the hidden words!
    p#chances You will only get 1 chance to play,if you select any wrong word,please reload the page to restart the game
    #concentration-meter
      div#concentration-level
    #game-container
    button#start-button(onclick="startGame()") Start Game
    button(onclick="window.location.href='/home'") Back Home
    button#reset-button(onclick="resetGame()", style="display:none;") Reset Game
    #popup
      div#popup-content
        p#popup-message
        button#popup-button(onclick="closePopup()") OK
        button#popup-button(onclick="playAgain()") Play Again
        button#popup-button(onclick="viewAnalysis()") View Analysis
    script.
      let words = ["LION", "TIGER", "BEAR", "FOX", "WOLF", "EAGLE", "SHARK", "SNAKE"];
      let gridSize = 8;
      let grid = [];
      let selectedCells = [];
      let foundWords = [];
      let chances = 5;
      let concentration = 0;

      function startGame() {
        document.getElementById('game-container').style.display = 'grid'; // Show the game grid
        document.getElementById('start-button').style.display = 'none'; // Hide the Start Game button
        document.getElementById('reset-button').style.display = 'inline-block'; // Show the Reset Game button
        document.getElementById('chances').style.display = 'inline-block'; // Show the chances remaining
        document.getElementById('message').textContent = 'Find the hidden words!';
        generateGrid();
        closePopup(); // Close the popup if open
        updateConcentration(); // Reset concentration meter
      }

      function generateGrid() {
        grid = Array.from({ length: gridSize }, () => Array(gridSize).fill(''));

        words.forEach(word => {
          let placed = false;
          while (!placed) {
            let direction = Math.random() > 0.5 ? 'horizontal' : 'vertical';
            let row = Math.floor(Math.random() * gridSize);
            let col = Math.floor(Math.random() * gridSize);

            if (canPlaceWord(word, row, col, direction)) {
              placeWord(word, row, col, direction);
              placed = true;
            }
          }
        });

        fillEmptyCells();
        createGridUI();
      }

      function canPlaceWord(word, row, col, direction) {
        if (direction === 'horizontal') {
          if (col + word.length > gridSize) return false;
          for (let i = 0; i < word.length; i++) {
            if (grid[row][col + i] !== '') return false;
          }
        } else {
          if (row + word.length > gridSize) return false;
          for (let i = 0; i < word.length; i++) {
            if (grid[row + i][col] !== '') return false;
          }
        }
        return true;
      }

      function placeWord(word, row, col, direction) {
        if (direction === 'horizontal') {
          for (let i = 0; i < word.length; i++) {
            grid[row][col + i] = word[i];
          }
        } else {
          for (let i = 0; i < word.length; i++) {
            grid[row + i][col] = word[i];
          }
        }
      }

      function fillEmptyCells() {
        for (let row = 0; row < gridSize; row++) {
          for (let col = 0; col < gridSize; col++) {
            if (grid[row][col] === '') {
              grid[row][col] = String.fromCharCode(65 + Math.floor(Math.random() * 26));
            }
          }
        }
      }

      function createGridUI() {
        const container = document.getElementById('game-container');
        container.innerHTML = ''; // Clear the existing grid
        grid.forEach((row, rowIndex) => {
          row.forEach((cell, colIndex) => {
            const cellElement = document.createElement('div');
            cellElement.classList.add('cell');
            cellElement.textContent = cell;
            cellElement.setAttribute('data-row', rowIndex);
            cellElement.setAttribute('data-col', colIndex);
            cellElement.onclick = () => selectCell(rowIndex, colIndex);
            container.appendChild(cellElement);
          });
        });
      }

      function selectCell(row, col) {
        const cellElement = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
        if (cellElement.classList.contains('found') || selectedCells.some(cell => cell.row === row && cell.col === col)) return;
        cellElement.classList.add('selected');
        selectedCells.push({ row, col, letter: cellElement.textContent });
        checkForFoundWords();
      }

      function checkForFoundWords() {
        const selectedWord = selectedCells.map(cell => cell.letter).join('');
        if (words.includes(selectedWord)) {
          foundWords.push(selectedWord);
          selectedCells.forEach(cell => {
            const cellElement = document.querySelector(`.cell[data-row="${cell.row}"][data-col="${cell.col}"]`);
            cellElement.classList.add('found');
          });
          selectedCells = [];
          updateConcentration(); // Increase concentration after finding a word
        }

        if (foundWords.length === words.length) {
          showPopup("You found all the words! Great job!");
        }
      }

      function updateConcentration() {
        concentration = foundWords.length * 10;
        document.getElementById('concentration-level').style.width = `${concentration}%`;
      }

      function resetGame() {
        foundWords = [];
        selectedCells = [];
        chances = 5;
        concentration = 0;
        updateConcentration();
        generateGrid();
      }

      function showPopup(message) {
        document.getElementById('popup-message').textContent = message;
        document.getElementById('popup').style.display = 'flex';
      }

      function closePopup() {
        document.getElementById('popup').style.display = 'none';
      }

      function playAgain() {
        resetGame();
        closePopup();
      }

      function viewAnalysis() {
        window.location.href='/analysis';
      }
