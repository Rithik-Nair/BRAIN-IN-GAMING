doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Cerebral Crossing - Crossword Puzzle Game
    style.
      /* General body styles */
      body {
        font-family: Arial, sans-serif;
        text-align: center;
        background: #f0f0f0;
        color: #000;
        margin: 0;
        padding: 20px;
      }

      /* Crossword grid styles */
      .crossword-grid {
        display: grid;
        grid-template-columns: repeat(10, 40px); /* Adjust columns as per your grid size */
        grid-template-rows: repeat(10, 40px); /* Adjust rows as per your grid size */
        gap: 5px;
        justify-content: center;
        margin-bottom: 20px;
      }

      .crossword-cell {
        width: 40px;
        height: 40px;
        border: 1px solid #000;
        text-align: center;
        font-size: 18px;
        background-color: #fff;
        outline: none;
        transition: background-color 0.3s ease;
      }

      .crossword-cell:focus {
        background-color: #dcdcdc;
      }

      /* Black cells (where no letters can be typed) */
      .crossword-cell.black {
        background-color: #000;
        color: #000;
        border: none;
        cursor: not-allowed;
      }

      /* Button container for back and start buttons */
      .button-container {
        margin-bottom: 20px;
      }

      button.back, button.start {
        color: #fff;
        background: #607d8b;
        border: none;
        border-radius: 8px;
        padding: 15px 25px;
        font-size: 18px;
        cursor: pointer;
        transition: background 0.3s ease;
        margin-right: 10px;
      }

      button.back:hover, button.start:hover {
        background: #3e4a52;
      }

      /* Clue styles */
      .clue-list {
        text-align: left;
        font-size: 18px;
        margin-top: 20px;
        display: inline-block;
        max-width: 300px;
        margin-left: auto;
        margin-right: auto;
      }

      .clue-item {
        margin: 10px 0;
      }

      /* Point meter styles */
      #point-meter {
        font-size: 24px;
        margin-bottom: 10px;
      }

      /* Modal styles */
      #game-over-modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        text-align: center;
      }

      #game-over-modal button {
        margin-top: 15px;
        background-color: #607d8b;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
      }

      #game-over-modal button:hover {
        background-color: #3e4a52;
      }

      /* Modal overlay */
      #modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
      }

  body
    h1 Cerebral Crossing - Crossword Puzzle Game
    #point-meter Points: 0
    #chances-left Chances Left: 5
    .button-container
      button.back(onclick="window.location.href='/'") Back to Home
      button.start(onclick="startGame()") Start Game
    div#crossword-container
      div.crossword-grid
        // Empty at the start, will be populated by JavaScript
    div.clue-list
      h3 Clues
      div#clues
        // Clues will be listed here
    div#modal-overlay
    div#game-over-modal
      h2 Game Over!
      p Your score: <span id="final-score">0</span>
      button(onclick="resetGame()") Play Again

    script.
      // Example crossword data
      const crossword = {
        grid: [
          ['A', 'P', 'P', 'L', 'E', '', '', '', '', ''],
          ['', '', '', 'P', '', '', 'B', 'A', 'N', 'A'],
          ['', '', '', 'P', '', '', '', '', '', ''],
          ['P', 'A', 'R', 'K', 'E', 'R', '', '', '', ''],
          ['', '', '', 'E', '', '', '', '', '', ''],
          ['', '', '', 'D', '', '', '', '', '', ''],
          ['', '', '', 'R', '', '', '', '', '', ''],
          ['B', 'A', 'C', 'K', 'E', 'R', '', '', '', ''],
          ['', '', '', 'K', '', '', '', '', '', ''],
          ['', '', '', 'E', '', '', '', '', '', '']
        ],
        clues: {
          across: [
            { number: 1, clue: 'A fruit', answer: 'APPLE' },
            { number: 4, clue: 'An occupation', answer: 'PARKER' },
            { number: 7, clue: 'A baker', answer: 'BAKER' }
          ],
          down: [
            { number: 1, clue: 'A fruit', answer: 'APPLE' },
            { number: 2, clue: 'An occupation', answer: 'PARKER' },
            { number: 5, clue: 'A baker', answer: 'BAKER' }
          ]
        }
      };

      let points = 0;
      let correctAnswers = 0;
      let chancesLeft = 5; // Limit the number of chances

      // Start game function
      function startGame() {
        points = 0;
        correctAnswers = 0;
        chancesLeft = 5; // Reset chances
        updatePoints();
        generateCrosswordGrid();
        generateClues();
        updateChances();
      }

      // Generate crossword grid dynamically
      function generateCrosswordGrid() {
        const gridContainer = document.querySelector('.crossword-grid');
        gridContainer.innerHTML = ''; // Clear the existing grid
        crossword.grid.forEach((row, rowIndex) => {
          row.forEach((cell, colIndex) => {
            const cellElement = document.createElement('input');
            cellElement.type = 'text';
            cellElement.maxLength = 1;
            cellElement.classList.add('crossword-cell');
            
            if (cell === '') {
              // Apply the 'black' class to empty cells
              cellElement.classList.add('black');
            } else {
              cellElement.setAttribute('data-correct', cell); // Store correct answer in a custom attribute
            }

            // Add event listener to check answer when typing
            cellElement.addEventListener('input', checkAnswer);

            gridContainer.appendChild(cellElement);
          });
        });
      }

      // Generate clue list dynamically
      function generateClues() {
        const cluesContainer = document.getElementById('clues');
        cluesContainer.innerHTML = '';
        crossword.clues.across.forEach(clue => {
          const clueElement = document.createElement('div');
          clueElement.classList.add('clue-item');
          clueElement.textContent = `Across ${clue.number}: ${clue.clue}`;
          cluesContainer.appendChild(clueElement);
        });
        crossword.clues.down.forEach(clue => {
          const clueElement = document.createElement('div');
          clueElement.classList.add('clue-item');
          clueElement.textContent = `Down ${clue.number}: ${clue.clue}`;
          cluesContainer.appendChild(clueElement);
        });
      }

      // Check the crossword answers when the user types in a cell
      function checkAnswer(event) {
        const cell = event.target;
        const correctAnswer = cell.getAttribute('data-correct');
        const userAnswer = cell.value.toUpperCase();
        
        if (userAnswer === correctAnswer) {
          cell.style.backgroundColor = '#90EE90'; // Green for correct
          points++; // Add points for correct answer
          correctAnswers++;
        } else if (userAnswer !== '') {
          cell.style.backgroundColor = '#FFCCCB'; // Red for incorrect
          points--; // Deduct points for incorrect answer
          chancesLeft--; // Deduct a chance for wrong answer
          updateChances();
        }

        updatePoints(); // Update points after each input

        // Check if all answers are correct (game over condition)
        if (correctAnswers === crossword.clues.across.length + crossword.clues.down.length) {
          gameOver();
        }

        // If chances run out, end the game
        if (chancesLeft <= 0) {
          gameOver();
        }
      }

      // Update points on the screen
      function updatePoints() {
        const pointMeter = document.getElementById('point-meter');
        pointMeter.textContent = 'Points: ' + points;
      }

      // Update chances left on the screen
      function updateChances() {
        const chancesMeter = document.getElementById('chances-left');
        chancesMeter.textContent = 'Chances Left: ' + chancesLeft;
      }

      // Game over function
      function gameOver() {
        document.getElementById('final-score').textContent = points;
        document.getElementById('game-over-modal').style.display = 'block';
        document.getElementById('modal-overlay').style.display = 'block';
      }

      // Reset game function
      function resetGame() {
        document.getElementById('game-over-modal').style.display = 'none';
        document.getElementById('modal-overlay').style.display = 'none';
        startGame();
      }
