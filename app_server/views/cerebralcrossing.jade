extends layout

block content
  // Page Title
  h1(style="margin-top:100px; color: #4CAF50; font-family: 'Arial', sans-serif; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);") Cerebral Crossing - Puzzle Game
  .game-container
    // Instructions (Cross the obstacles message)
    .instructions
      p#instructions(style="font-size: 24px; font-weight: bold; color: #333; margin-bottom: 20px;") Cross the obstacles to reach the goal!

    // Game Grid
    .game-wrapper
      #game-container
        // Placeholder for game elements (Obstacles & Goal)

    // Buttons below the game grid
    .buttons-wrapper
      button#start-button(onclick="startGame()") Start Game
      button#reset-button(onclick="resetGame()") Reset Game

  script.
    let game;
    let gameSize = 10;  // Set grid size (10x10 for example)
    let goalReached = false;

    // Function to start the game
    function startGame() {
      document.getElementById("instructions").textContent = "Cross the obstacles to reach the goal!";
      game = generateGameGrid(gameSize);
      displayGameGrid(game);
      goalReached = false;
    }

    // Function to reset the game
    function resetGame() {
      document.getElementById("instructions").textContent = "Cross the obstacles to reach the goal!";
      goalReached = false;
      displayGameGrid(game);
    }

    // Function to generate game grid with obstacles and goal
    function generateGameGrid(size) {
      let grid = Array.from({ length: size }, () => Array(size).fill(0));
      grid[0][0] = 1; // Start point
      grid[size - 1][size - 1] = 2; // Goal point
      // Random obstacle generation (you can improve with more complex logic)
      for (let i = 0; i < size; i++) {
        for (let j = 0; j < size; j++) {
          if (Math.random() < 0.2 && (i !== 0 || j !== 0) && (i !== size - 1 || j !== size - 1)) {
            grid[i][j] = 3; // Obstacle point
          }
        }
      }
      return grid;
    }

    // Function to display the game grid
    function displayGameGrid(grid) {
      const container = document.getElementById("game-container");
      container.innerHTML = ""; // Clear previous grid

      grid.forEach((row, rowIndex) => {
        row.forEach((cell, colIndex) => {
          const cellElement = document.createElement("div");
          cellElement.className = "game-cell";
          if (cell === 1) {
            cellElement.classList.add("start");  // Start point
            cellElement.textContent = "S";
          } else if (cell === 2) {
            cellElement.classList.add("goal");  // Goal point
            cellElement.textContent = "G";
          } else if (cell === 3) {
            cellElement.classList.add("obstacle");  // Obstacle point
          } else {
            cellElement.classList.add("empty");
          }
          container.appendChild(cellElement);
        });
      });
    }

    // Add event listeners for game interactions (e.g., clicking on cells to check the path)
    document.getElementById("game-container").addEventListener("click", (event) => {
      const target = event.target;
      if (target.classList.contains("game-cell") && !goalReached) {
        // Handle cell click (you could implement path checking logic here)
        if (target.classList.contains("obstacle")) {
          target.classList.add("visited");
          document.getElementById("instructions").textContent = "Oops! You hit an obstacle.";
        } else if (target.classList.contains("goal")) {
          goalReached = true;
          document.getElementById("instructions").textContent = "Congratulations! You've reached the goal!";
        } else {
          target.classList.add("visited");
        }
      }
    });

    // Initialize game
    startGame();
  </script>

  style.
    /* Layout Styling */
    body {
      background-color: #f4f7fc;
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      color: #333;
    }

    .game-container {
      text-align: center;
      margin: 50px auto;
      padding: 30px;
      background-color: #ffffff;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      border-radius: 10px;
      max-width: 1200px;
      width: 100%;
    }

    .instructions {
      font-size: 24px;
      font-weight: bold;
      color: #333;
      margin-bottom: 30px;
      letter-spacing: 1px;
    }

    .game-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      margin-top: 30px;
    }

    .buttons-wrapper {
      margin-top: 20px;
    }

    /* Game Grid Styling */
    #game-container {
      display: grid;
      grid-template-columns: repeat(10, 30px);
      grid-gap: 5px;
      justify-content: center;
      margin-bottom: 30px;
    }

    .game-cell {
      width: 30px;
      height: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 1px solid #ccc;
      cursor: pointer;
      background-color: #f0f0f0;
      transition: background-color 0.3s;
    }

    .start {
      background-color: #4CAF50;
      color: white;
    }

    .goal {
      background-color: #f44336;
      color: white;
    }

    .obstacle {
      background-color: #000;
      color: white;
    }

    .empty {
      background-color: #ffffff;
    }

    .visited {
      background-color: #D3D3D3;
    }

    /* Button Styling */
    button {
      padding: 12px 24px;
      font-size: 18px;
      margin: 5px;
      cursor: pointer;
      background-color: #008CBA;
      color: white;
      border: none;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #007B9F;
    }

    /* Responsive Styling */
    @media (max-width: 768px) {
      .game-container {
        width: 90%;
      }

      #game-container {
        grid-template-columns: repeat(8, 30px);
      }
    }

    @media (max-width: 480px) {
      #game-container {
        grid-template-columns: repeat(6, 30px);
      }
    }
