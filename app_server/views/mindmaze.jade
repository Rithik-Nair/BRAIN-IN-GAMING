extends layout

block content
  // Page Title
  h1(style="margin-top:100px") Mind Maze - Puzzle Game
  .game-container
    // Instructions (Find the path to goal message)
    .instructions
      p#instructions Find the path to the goal!
    
    // Maze Grid
    .maze-wrapper
      #maze-container
        // Placeholder for the maze grid

    // Buttons below the maze grid
    .buttons-wrapper
      button#start-button(onclick="startGame()") Start Game
      button#reset-button(onclick="resetGame()") Reset Game

  script.
    let maze;
    let mazeSize = 10;  // Set maze size (10x10 for example)
    let pathFound = false;

    // Function to start the game
    function startGame() {
      document.getElementById("instructions").textContent = "Find the path to the goal!";
      maze = generateMaze(mazeSize);
      displayMaze(maze);
      pathFound = false;
    }

    // Function to reset the game
    function resetGame() {
      document.getElementById("instructions").textContent = "Solve the puzzle by finding the hidden paths!";
      pathFound = false;
      displayMaze(maze);
    }

    // Function to generate maze
    function generateMaze(size) {
      let grid = Array.from({ length: size }, () => Array(size).fill(0));
      grid[0][0] = 1; // Start point
      grid[size - 1][size - 1] = 2; // Goal point

      // Random maze generation logic here (you can implement a simple algorithm like DFS or BFS)
      // For simplicity, I'm just marking the start and end
      return grid;
    }

    // Function to display maze
    function displayMaze(grid) {
      const container = document.getElementById("maze-container");
      container.innerHTML = ""; // Clear previous maze

      grid.forEach((row, rowIndex) => {
        row.forEach((cell, colIndex) => {
          const cellElement = document.createElement("div");
          cellElement.className = "maze-cell";
          if (cell === 1) {
            cellElement.classList.add("start");  // Start point
            cellElement.textContent = "S";
          } else if (cell === 2) {
            cellElement.classList.add("goal");  // Goal point
            cellElement.textContent = "G";
          } else {
            cellElement.classList.add("empty");
          }
          container.appendChild(cellElement);
        });
      });
    }

    // Add event listeners for game interactions (e.g., clicking on cells to try paths)
    document.getElementById("maze-container").addEventListener("click", (event) => {
      const target = event.target;
      if (target.classList.contains("maze-cell")) {
        // Handle cell click (you could implement path finding and checking logic here)
        target.classList.add("visited");
        if (pathFound) {
          document.getElementById("instructions").textContent = "Congratulations! You've completed the maze!";
        }
      }
    });

    // Initialize game
    startGame();
  </script>

  style.
    /* Layout Styling */
    .game-container {
      text-align: center;
      margin: 50px auto;
      width: 80%;
      max-width: 1000px;
    }

    .instructions {
      margin-top: 20px; /* Space between instructions and top content */
      margin-bottom: 20px;
      font-size: 20px;
      font-weight: bold;
      color: #333;
    }

    .maze-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      margin-top: 30px;
    }

    .buttons-wrapper {
      margin-top: 20px;
    }

    /* Maze Grid Styling */
    #maze-container {
      display: grid;
      grid-template-columns: repeat(10, 30px);
      grid-gap: 5px;
      margin-top: 20px;
      justify-content: center;
      margin-bottom: 30px;
    }

    .maze-cell {
      width: 30px;
      height: 30px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 1px solid #ccc;
      cursor: pointer;
      background-color: #f0f0f0;
      transition: background-color 0.3s;
    }

    .start {
      background-color: #4CAF50;
      color: white;
    }

    .goal {
      background-color: #f44336;
      color: white;
    }

    .empty {
      background-color: #ffffff;
    }

    .visited {
      background-color: #D3D3D3;
    }

    /* Button Styling */
    button {
      padding: 10px 20px;
      font-size: 16px;
      margin: 5px;
      cursor: pointer;
      background-color: #008CBA;
      color: white;
      border: none;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #007B9F;
    }

    /* Responsive Styling */
    @media (max-width: 768px) {
      .game-container {
        width: 90%;
      }
      
      #maze-container {
        grid-template-columns: repeat(8, 30px);
      }
    }

    @media (max-width: 480px) {
      #maze-container {
        grid-template-columns: repeat(6, 30px);
      }
    }
