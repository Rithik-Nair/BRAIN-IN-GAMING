doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Mind Maze - Card Game
    style.
      /* General body styles */
      body {
        font-family: Arial, sans-serif;
        text-align: center;
        background: #f0f0f0;
        color: #000;
        margin: 0;
        padding: 20px;
      }

      /* Card styles */
      .card {
        width: 120px;
        height: 180px;
        border: 2px solid #000;
        background-color: #ccc; /* Back-facing color */
        border-radius: 10px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease-in-out;
        display: inline-block;
        margin: 10px;
        position: relative;
      }

      .card:hover {
        transform: scale(1.05);
      }

      .card img {
        width: 100%;
        height: 100%;
        border-radius: 10px;
        display: none; /* Hide image initially */
        position: absolute;
        top: 0;
        left: 0;
      }

      /* Button container for back and start buttons */
      .button-container {
        margin-bottom: 20px;
      }

      button.back, button.start {
        color: #fff;
        background: #607d8b;
        border: none;
        border-radius: 8px;
        padding: 15px 25px;
        font-size: 18px;
        cursor: pointer;
        transition: background 0.3s ease;
        margin-right: 10px;
      }

      button.back:hover, button.start:hover {
        background: #3e4a52;
      }

      /* Grid layout for card deck */
      #card-deck {
        display: grid;
        grid-template-columns: repeat(4, 120px); /* 4 columns of cards */
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
      }

      /* Point meter styles */
      #point-meter {
        font-size: 24px;
        margin-bottom: 10px;
      }

      /* Feedback message styles */
      #feedback {
        font-size: 20px;
        color: #333;
        margin-bottom: 20px;
      }

      /* Chances meter styles */
      #chances-meter {
        font-size: 20px;
        margin-bottom: 10px;
      }

      /* Modal styles */
      #game-over-modal {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        text-align: center;
      }

      #game-over-modal button {
        margin-top: 15px;
        background-color: #607d8b;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
      }

      #game-over-modal button:hover {
        background-color: #3e4a52;
      }

      /* Modal overlay */
      #modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
      }

  body
    h1 Mind Maze - Card Game
    #point-meter Points: 0
    #chances-meter Chances Left: 5
    #feedback
    .button-container
      button.back(onclick="window.location.href='/'") Back to Home
      button.start(onclick="startGame()") Start Game
    div#card-deck
      // Empty at the start, will be populated by JavaScript

    // Modal structure for Game Over
    div#modal-overlay
    div#game-over-modal
      h2 Game Over!
      p Your score: <span id="final-score">0</span>
      button(onclick="resetGame()") Play Again

    script.
      // Example array of cards
      const cards = [
        { name: 'Card 1', image: '/images/card1.jpg' },
        { name: 'Card 2', image: '/images/card2.jpg' },
        { name: 'Card 3', image: '/images/card3.jpg' },
        { name: 'Card 4', image: '/images/card4.jpg' },
        { name: 'Card 5', image: '/images/card5.jpg' },
        { name: 'Card 6', image: '/images/card6.jpg' },
        { name: 'Card 1', image: '/images/card1.jpg' },
        { name: 'Card 2', image: '/images/card2.jpg' },
        { name: 'Card 3', image: '/images/card3.jpg' },
        { name: 'Card 4', image: '/images/card4.jpg' },
        { name: 'Card 5', image: '/images/card5.jpg' },
        { name: 'Card 6', image: '/images/card6.jpg' }
      ];

      // Shuffle the cards
      function shuffle(array) {
        for (let i = array.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [array[i], array[j]] = [array[j], array[i]];
        }
      }

      // Start game function
      function startGame() {
        points = 0; // Reset points at the start of the game
        chances = 5; // Set the number of chances
        updatePoints();
        updateChances();
        updateFeedback('');
        shuffle(cards);
        const cardDeck = document.getElementById('card-deck');
        cardDeck.innerHTML = ''; // Clear existing cards
        cards.forEach((card, index) => {
          const cardElement = document.createElement('div');
          cardElement.classList.add('card');
          cardElement.setAttribute('data-index', index);
          cardElement.setAttribute('id', 'card-' + index);
          const imgElement = document.createElement('img');
          imgElement.setAttribute('src', card.image);
          imgElement.setAttribute('alt', card.name);
          cardElement.appendChild(imgElement);
          cardElement.setAttribute('onclick', 'flipCard(this)'); // Set click event for card
          cardDeck.appendChild(cardElement);
        });
      }

      // Function to flip the card
      let flippedCards = [];
      let points = 0;
      let chances = 5; // Number of chances
      let canFlip = true; // Prevent flipping during card match check

      function flipCard(cardElement) {
        if (!canFlip || chances <= 0) return; // Prevent flipping if cards are being checked or no chances left
        
        const imgElement = cardElement.querySelector('img');
        
        // Check if the card is already flipped
        if (imgElement.style.display === 'block') return; // Skip if already flipped
        
        // Show the image of the flipped card
        imgElement.style.display = 'block';
        
        flippedCards.push({ cardElement, imgElement });
        
        if (flippedCards.length === 2) {
          canFlip = false; // Disable flipping new cards until the current check is done
          checkMatch();
        }
      }

      function checkMatch() {
        const [firstCard, secondCard] = flippedCards;
        
        if (firstCard.imgElement.src === secondCard.imgElement.src) {
          points++;
          updatePoints();
          updateFeedback('Correct!');
          flippedCards = []; // Reset flipped cards
          canFlip = true; // Enable flipping again
        } else {
          updateFeedback('Wrong!');
          chances--; // Decrease chances on wrong match
          updateChances();
          setTimeout(() => {
            firstCard.imgElement.style.display = 'none'; // Hide both cards
            secondCard.imgElement.style.display = 'none';
            flippedCards = []; // Reset flipped cards
            canFlip = true; // Enable flipping again
          }, 1000);
        }

        // Game over if chances are exhausted
        if (chances <= 0) {
          gameOver();
        }
      }

      function updatePoints() {
        const pointMeter = document.getElementById('point-meter');
        pointMeter.textContent = 'Points: ' + points;
      }

      function updateChances() {
        const chancesMeter = document.getElementById('chances-meter');
        chancesMeter.textContent = 'Chances Left: ' + chances;
      }

      function updateFeedback(message) {
        const feedbackElement = document.getElementById('feedback');
        feedbackElement.textContent = message;
      }

      function gameOver() {
        updateFeedback('Game Over!');
        setTimeout(() => {
          // Show modal
          document.getElementById('final-score').textContent = points;
          document.getElementById('game-over-modal').style.display = 'block';
          document.getElementById('modal-overlay').style.display = 'block';
        }, 1000);
      }

      function resetGame() {
        points = 0;
        chances = 5;
        updatePoints();
        updateChances();
        updateFeedback('');
        document.getElementById('game-over-modal').style.display = 'none';
        document.getElementById('modal-overlay').style.display = 'none';
        startGame();
      }
